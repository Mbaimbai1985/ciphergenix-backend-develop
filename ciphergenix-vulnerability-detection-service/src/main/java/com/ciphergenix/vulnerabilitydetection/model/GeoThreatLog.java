package com.ciphergenix.vulnerabilitydetection.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

/**
 * Geographic Threat Log Entity for CipherGenix AI Security Platform
 * 
 * Detailed logging system for tracking individual threat events
 * with comprehensive geographic and temporal information.
 */
@Entity
@Table(name = "geo_threat_logs", indexes = {
    @Index(name = "idx_geo_threat_timestamp", columnList = "timestamp"),
    @Index(name = "idx_geo_threat_ip", columnList = "source_ip"),
    @Index(name = "idx_geo_threat_country", columnList = "country"),
    @Index(name = "idx_geo_threat_type", columnList = "threat_type"),
    @Index(name = "idx_geo_threat_severity", columnList = "severity"),
    @Index(name = "idx_geo_threat_location", columnList = "country, region, city")
})
@Data
@NoArgsConstructor
@AllArgsConstructor
public class GeoThreatLog {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "log_id")
    private Long logId;

    @Column(name = "threat_id", nullable = false)
    private String threatId;

    @CreationTimestamp
    @Column(name = "timestamp", nullable = false)
    private LocalDateTime timestamp;

    // Source Information
    @Column(name = "source_ip", nullable = false, length = 45)
    private String sourceIp;

    @Column(name = "source_port")
    private Integer sourcePort;

    @Column(name = "user_agent", columnDefinition = "TEXT")
    private String userAgent;

    @Column(name = "request_method", length = 10)
    private String requestMethod;

    @Column(name = "request_uri", columnDefinition = "TEXT")
    private String requestUri;

    // Geographic Information
    @Column(name = "country", length = 100)
    private String country;

    @Column(name = "country_code", length = 3)
    private String countryCode;

    @Column(name = "region", length = 100)
    private String region;

    @Column(name = "region_code", length = 10)
    private String regionCode;

    @Column(name = "city", length = 100)
    private String city;

    @Column(name = "postal_code", length = 20)
    private String postalCode;

    @Column(name = "latitude", precision = 10, scale = 8)
    private Double latitude;

    @Column(name = "longitude", precision = 11, scale = 8)
    private Double longitude;

    @Column(name = "timezone", length = 50)
    private String timezone;

    // Network Information
    @Column(name = "isp", length = 200)
    private String isp;

    @Column(name = "organization", length = 200)
    private String organization;

    @Column(name = "as_number")
    private Long asNumber;

    @Column(name = "as_name", length = 200)
    private String asName;

    // Threat Classification
    @Column(name = "threat_type", nullable = false)
    @Enumerated(EnumType.STRING)
    private ThreatLocation.ThreatType threatType;

    @Column(name = "severity", nullable = false)
    @Enumerated(EnumType.STRING)
    private ThreatLocation.SeverityLevel severity;

    @Column(name = "confidence_score", precision = 5, scale = 2)
    private Double confidenceScore;

    @Column(name = "risk_score", precision = 5, scale = 2)
    private Double riskScore;

    // Detection Information
    @Column(name = "detection_algorithm", length = 100)
    private String detectionAlgorithm;

    @Column(name = "detection_confidence", precision = 5, case = 2)
    private Double detectionConfidence;

    @Column(name = "false_positive_probability", precision = 5, scale = 2)
    private Double falsePositiveProbability;

    // Security Flags
    @Column(name = "is_vpn", nullable = false)
    private Boolean isVpn = false;

    @Column(name = "is_proxy", nullable = false)
    private Boolean isProxy = false;

    @Column(name = "is_tor", nullable = false)
    private Boolean isTor = false;

    @Column(name = "is_hosting", nullable = false)
    private Boolean isHosting = false;

    @Column(name = "is_malware", nullable = false)
    private Boolean isMalware = false;

    @Column(name = "is_botnet", nullable = false)
    private Boolean isBotnet = false;

    // Response Information
    @Column(name = "response_action")
    @Enumerated(EnumType.STRING)
    private ResponseAction responseAction;

    @Column(name = "blocked", nullable = false)
    private Boolean blocked = false;

    @Column(name = "quarantined", nullable = false)
    private Boolean quarantined = false;

    @Column(name = "alerted", nullable = false)
    private Boolean alerted = false;

    // Payload Information
    @Column(name = "payload_size")
    private Long payloadSize;

    @Column(name = "payload_hash", length = 64)
    private String payloadHash;

    @Column(name = "malicious_patterns", columnDefinition = "TEXT")
    private String maliciousPatterns;

    // Session Information
    @Column(name = "session_id", length = 100)
    private String sessionId;

    @Column(name = "user_id", length = 100)
    private String userId;

    @Column(name = "attack_vector", length = 100)
    private String attackVector;

    @Column(name = "target_component", length = 100)
    private String targetComponent;

    // Additional Context
    @Column(name = "http_status_code")
    private Integer httpStatusCode;

    @Column(name = "response_time_ms")
    private Long responseTimeMs;

    @Column(name = "bytes_transferred")
    private Long bytesTransferred;

    @Column(name = "protocol", length = 20)
    private String protocol;

    // Enrichment Information
    @Column(name = "threat_intelligence_sources", columnDefinition = "TEXT")
    private String threatIntelligenceSources;

    @Column(name = "geolocation_accuracy", length = 50)
    private String geolocationAccuracy;

    @Column(name = "reputation_score", precision = 5, scale = 2)
    private Double reputationScore;

    // Metadata and Notes
    @Column(name = "tags", columnDefinition = "TEXT")
    private String tags;

    @Column(name = "notes", columnDefinition = "TEXT")
    private String notes;

    @Column(name = "metadata", columnDefinition = "TEXT")
    private String metadata;

    @Column(name = "raw_log_entry", columnDefinition = "TEXT")
    private String rawLogEntry;

    // Response Action Enum
    public enum ResponseAction {
        ALLOW,
        MONITOR,
        RATE_LIMIT,
        QUARANTINE,
        BLOCK,
        ALERT_ONLY,
        ESCALATE
    }

    /**
     * Check if this is a high-risk threat event
     */
    public boolean isHighRisk() {
        return severity == ThreatLocation.SeverityLevel.HIGH || 
               severity == ThreatLocation.SeverityLevel.CRITICAL ||
               (riskScore != null && riskScore >= 7.0) ||
               isMalware || isBotnet;
    }

    /**
     * Check if the source is suspicious
     */
    public boolean isSuspiciousSource() {
        return isVpn || isProxy || isTor || isMalware || isBotnet;
    }

    /**
     * Get formatted location string
     */
    public String getFormattedLocation() {
        StringBuilder location = new StringBuilder();
        if (city != null && !city.isEmpty()) {
            location.append(city);
        }
        if (region != null && !region.isEmpty()) {
            if (location.length() > 0) location.append(", ");
            location.append(region);
        }
        if (country != null && !country.isEmpty()) {
            if (location.length() > 0) location.append(", ");
            location.append(country);
        }
        return location.toString();
    }

    /**
     * Get threat summary for logging
     */
    public String getThreatSummary() {
        return String.format("[%s] %s from %s (%s) - Severity: %s, Risk: %.2f",
            threatType,
            threatId,
            sourceIp,
            getFormattedLocation(),
            severity,
            riskScore != null ? riskScore : 0.0
        );
    }

    /**
     * Generate location key for aggregation
     */
    public String getLocationKey() {
        return ThreatMatrix.generateLocationKey(country, region, city);
    }

    /**
     * Check if threat requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return severity == ThreatLocation.SeverityLevel.CRITICAL ||
               (riskScore != null && riskScore >= 9.0) ||
               (isMalware && !blocked) ||
               (isBotnet && !quarantined);
    }

    /**
     * Get security context for analysis
     */
    public String getSecurityContext() {
        StringBuilder context = new StringBuilder();
        
        if (isVpn) context.append("VPN,");
        if (isProxy) context.append("PROXY,");
        if (isTor) context.append("TOR,");
        if (isHosting) context.append("HOSTING,");
        if (isMalware) context.append("MALWARE,");
        if (isBotnet) context.append("BOTNET,");
        
        if (context.length() > 0) {
            context.setLength(context.length() - 1); // Remove trailing comma
        }
        
        return context.toString();
    }
}