package com.ciphergenix.vulnerabilitydetection.dto;

import jakarta.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

public class AdversarialDetectionRequest {
    
    @NotNull(message = "Session ID is required")
    private String sessionId;
    
    @NotNull(message = "Input data is required")
    private List<Double> inputData;
    
    @NotNull(message = "Model ID is required")
    private String modelId;
    
    private Map<String, Object> modelMetadata;
    
    private List<String> enabledDetectors;
    
    private Map<String, Double> detectionThresholds;
    
    private Boolean enableRealtimeProtection;
    
    private String attackType; // FGSM, PGD, C&W, etc.
    
    // Constructors
    public AdversarialDetectionRequest() {}
    
    public AdversarialDetectionRequest(String sessionId, List<Double> inputData, String modelId) {
        this.sessionId = sessionId;
        this.inputData = inputData;
        this.modelId = modelId;
    }
    
    // Getters and Setters
    public String getSessionId() {
        return sessionId;
    }
    
    public void setSessionId(String sessionId) {
        this.sessionId = sessionId;
    }
    
    public List<Double> getInputData() {
        return inputData;
    }
    
    public void setInputData(List<Double> inputData) {
        this.inputData = inputData;
    }
    
    public String getModelId() {
        return modelId;
    }
    
    public void setModelId(String modelId) {
        this.modelId = modelId;
    }
    
    public Map<String, Object> getModelMetadata() {
        return modelMetadata;
    }
    
    public void setModelMetadata(Map<String, Object> modelMetadata) {
        this.modelMetadata = modelMetadata;
    }
    
    public List<String> getEnabledDetectors() {
        return enabledDetectors;
    }
    
    public void setEnabledDetectors(List<String> enabledDetectors) {
        this.enabledDetectors = enabledDetectors;
    }
    
    public Map<String, Double> getDetectionThresholds() {
        return detectionThresholds;
    }
    
    public void setDetectionThresholds(Map<String, Double> detectionThresholds) {
        this.detectionThresholds = detectionThresholds;
    }
    
    public Boolean getEnableRealtimeProtection() {
        return enableRealtimeProtection;
    }
    
    public void setEnableRealtimeProtection(Boolean enableRealtimeProtection) {
        this.enableRealtimeProtection = enableRealtimeProtection;
    }
    
    public String getAttackType() {
        return attackType;
    }
    
    public void setAttackType(String attackType) {
        this.attackType = attackType;
    }
}