package com.ciphergenix.vulnerabilitydetection.repository;

import com.ciphergenix.vulnerabilitydetection.model.DetectionResult;
import com.ciphergenix.vulnerabilitydetection.model.DetectionType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public interface DetectionResultRepository extends JpaRepository<DetectionResult, Long> {
    
    /**
     * Find detection results by session ID
     */
    List<DetectionResult> findBySessionIdOrderByCreatedAtDesc(String sessionId);
    
    /**
     * Find detection results by detection type
     */
    List<DetectionResult> findByDetectionTypeOrderByCreatedAtDesc(DetectionType detectionType);
    
    /**
     * Find detection results where threats were detected
     */
    List<DetectionResult> findByIsThreatDetectedTrueOrderByCreatedAtDesc();
    
    /**
     * Find recent detection results within a time period
     */
    List<DetectionResult> findByCreatedAtAfterOrderByCreatedAtDesc(LocalDateTime after);
    
    /**
     * Find detection results by threat score range
     */
    @Query("SELECT dr FROM DetectionResult dr WHERE dr.threatScore BETWEEN :minScore AND :maxScore ORDER BY dr.threatScore DESC")
    List<DetectionResult> findByThreatScoreBetween(@Param("minScore") Double minScore, @Param("maxScore") Double maxScore);
    
    /**
     * Find detection results by algorithm used
     */
    List<DetectionResult> findByAlgorithmUsedOrderByCreatedAtDesc(String algorithmUsed);
    
    /**
     * Find detection results by session and detection type
     */
    Optional<DetectionResult> findBySessionIdAndDetectionType(String sessionId, DetectionType detectionType);
    
    /**
     * Count threat detections by type
     */
    @Query("SELECT COUNT(dr) FROM DetectionResult dr WHERE dr.detectionType = :detectionType AND dr.isThreatDetected = true")
    Long countThreatsByType(@Param("detectionType") DetectionType detectionType);
    
    /**
     * Get average threat score by detection type
     */
    @Query("SELECT AVG(dr.threatScore) FROM DetectionResult dr WHERE dr.detectionType = :detectionType")
    Double getAverageThreatScoreByType(@Param("detectionType") DetectionType detectionType);
    
    /**
     * Find recent high-risk detections
     */
    @Query("SELECT dr FROM DetectionResult dr WHERE dr.threatScore > :threshold AND dr.createdAt > :since ORDER BY dr.threatScore DESC")
    List<DetectionResult> findHighRiskDetections(@Param("threshold") Double threshold, @Param("since") LocalDateTime since);
    
    /**
     * Get detection statistics
     */
    @Query("SELECT dr.detectionType, COUNT(dr), AVG(dr.threatScore), MAX(dr.threatScore) " +
           "FROM DetectionResult dr " +
           "WHERE dr.createdAt > :since " +
           "GROUP BY dr.detectionType")
    List<Object[]> getDetectionStatistics(@Param("since") LocalDateTime since);
}