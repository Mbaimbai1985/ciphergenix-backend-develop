package com.ciphergenix.vulnerabilitydetection.repository;

import com.ciphergenix.vulnerabilitydetection.model.GeoThreatLog;
import com.ciphergenix.vulnerabilitydetection.model.ThreatLocation;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Repository interface for GeoThreatLog entity
 * 
 * Provides data access methods for managing geographic threat logs
 * and threat event tracking with comprehensive analytics support.
 */
@Repository
public interface GeoThreatLogRepository extends JpaRepository<GeoThreatLog, Long> {

    /**
     * Find recent threats by IP address
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.sourceIp = :ipAddress " +
           "AND gtl.timestamp >= :since ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findRecentThreatsByIp(@Param("ipAddress") String ipAddress, 
                                           @Param("since") LocalDateTime since);

    /**
     * Find threats by country
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.country = :country " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findByCountry(@Param("country") String country);

    /**
     * Find threats by threat type
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.threatType = :threatType " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findByThreatType(@Param("threatType") ThreatLocation.ThreatType threatType);

    /**
     * Find threats by severity level
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.severity = :severity " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findBySeverity(@Param("severity") ThreatLocation.SeverityLevel severity);

    /**
     * Find high-risk threats
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.severity IN ('HIGH', 'CRITICAL') " +
           "OR gtl.riskScore >= 7.0 OR gtl.isMalware = true OR gtl.isBotnet = true " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findHighRiskThreats();

    /**
     * Find threats requiring immediate attention
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.severity = 'CRITICAL' " +
           "OR gtl.riskScore >= 9.0 OR (gtl.isMalware = true AND gtl.blocked = false) " +
           "OR (gtl.isBotnet = true AND gtl.quarantined = false) " +
           "ORDER BY gtl.riskScore DESC")
    List<GeoThreatLog> findThreatsRequiringAttention();

    /**
     * Find suspicious source threats (VPN/Proxy/Tor)
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.isVpn = true " +
           "OR gtl.isProxy = true OR gtl.isTor = true " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findSuspiciousSourceThreats();

    /**
     * Find blocked threats
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.blocked = true " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findBlockedThreats();

    /**
     * Find threats by time range
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.timestamp >= :startTime " +
           "AND gtl.timestamp <= :endTime ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findByTimeRange(@Param("startTime") LocalDateTime startTime, 
                                     @Param("endTime") LocalDateTime endTime);

    /**
     * Find recent threat activity (last 24 hours)
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.timestamp >= :since " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findRecentActivity(@Param("since") LocalDateTime since);

    /**
     * Count threats by country
     */
    @Query("SELECT gtl.country, COUNT(gtl) FROM GeoThreatLog gtl " +
           "WHERE gtl.country IS NOT NULL GROUP BY gtl.country " +
           "ORDER BY COUNT(gtl) DESC")
    List<Object[]> countThreatsByCountry();

    /**
     * Count threats by type
     */
    @Query("SELECT gtl.threatType, COUNT(gtl) FROM GeoThreatLog gtl " +
           "GROUP BY gtl.threatType ORDER BY COUNT(gtl) DESC")
    List<Object[]> countThreatsByType();

    /**
     * Count threats by severity
     */
    @Query("SELECT gtl.severity, COUNT(gtl) FROM GeoThreatLog gtl " +
           "GROUP BY gtl.severity ORDER BY COUNT(gtl) DESC")
    List<Object[]> countThreatsBySeverity();

    /**
     * Get threat statistics for time period
     */
    @Query("SELECT " +
           "COUNT(gtl) as totalThreats, " +
           "SUM(CASE WHEN gtl.severity = 'CRITICAL' THEN 1 ELSE 0 END) as criticalThreats, " +
           "SUM(CASE WHEN gtl.severity = 'HIGH' THEN 1 ELSE 0 END) as highThreats, " +
           "SUM(CASE WHEN gtl.blocked = true THEN 1 ELSE 0 END) as blockedThreats, " +
           "SUM(CASE WHEN gtl.isMalware = true THEN 1 ELSE 0 END) as malwareThreats, " +
           "COUNT(DISTINCT gtl.sourceIp) as uniqueIps, " +
           "AVG(gtl.riskScore) as avgRiskScore " +
           "FROM GeoThreatLog gtl WHERE gtl.timestamp >= :since")
    Object[] getThreatStatistics(@Param("since") LocalDateTime since);

    /**
     * Get top threat sources by IP
     */
    @Query("SELECT gtl.sourceIp, gtl.country, COUNT(gtl) as threatCount, " +
           "AVG(gtl.riskScore) as avgRiskScore, MAX(gtl.timestamp) as lastSeen " +
           "FROM GeoThreatLog gtl GROUP BY gtl.sourceIp, gtl.country " +
           "ORDER BY COUNT(gtl) DESC")
    List<Object[]> getTopThreatSources();

    /**
     * Get geographic threat distribution
     */
    @Query("SELECT gtl.country, gtl.region, gtl.city, COUNT(gtl) as threatCount, " +
           "AVG(gtl.riskScore) as avgRiskScore " +
           "FROM GeoThreatLog gtl WHERE gtl.country IS NOT NULL " +
           "GROUP BY gtl.country, gtl.region, gtl.city " +
           "ORDER BY COUNT(gtl) DESC")
    List<Object[]> getGeographicThreatDistribution();

    /**
     * Get threat timeline data
     */
    @Query("SELECT DATE(gtl.timestamp) as threatDate, COUNT(gtl) as threatCount, " +
           "AVG(gtl.riskScore) as avgRiskScore " +
           "FROM GeoThreatLog gtl WHERE gtl.timestamp >= :since " +
           "GROUP BY DATE(gtl.timestamp) ORDER BY DATE(gtl.timestamp)")
    List<Object[]> getThreatTimeline(@Param("since") LocalDateTime since);

    /**
     * Find threat patterns by IP
     */
    @Query("SELECT gtl.sourceIp, gtl.threatType, COUNT(gtl) as occurrences " +
           "FROM GeoThreatLog gtl WHERE gtl.sourceIp = :ipAddress " +
           "GROUP BY gtl.sourceIp, gtl.threatType ORDER BY COUNT(gtl) DESC")
    List<Object[]> findThreatPatternsByIp(@Param("ipAddress") String ipAddress);

    /**
     * Find escalated threats
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE gtl.responseAction = 'ESCALATE' " +
           "ORDER BY gtl.timestamp DESC")
    List<GeoThreatLog> findEscalatedThreats();

    /**
     * Find unresponded high-risk threats
     */
    @Query("SELECT gtl FROM GeoThreatLog gtl WHERE " +
           "(gtl.severity = 'CRITICAL' OR gtl.riskScore >= 8.0) " +
           "AND gtl.responseAction IS NULL AND gtl.blocked = false " +
           "ORDER BY gtl.riskScore DESC")
    List<GeoThreatLog> findUnrespondedHighRiskThreats();

    /**
     * Get threat frequency by hour
     */
    @Query("SELECT HOUR(gtl.timestamp) as hour, COUNT(gtl) as threatCount " +
           "FROM GeoThreatLog gtl WHERE gtl.timestamp >= :since " +
           "GROUP BY HOUR(gtl.timestamp) ORDER BY HOUR(gtl.timestamp)")
    List<Object[]> getThreatFrequencyByHour(@Param("since") LocalDateTime since);

    /**
     * Find repeat offender IPs
     */
    @Query("SELECT gtl.sourceIp, COUNT(gtl) as threatCount, " +
           "COUNT(DISTINCT gtl.threatType) as threatTypes, " +
           "MAX(gtl.riskScore) as maxRiskScore " +
           "FROM GeoThreatLog gtl GROUP BY gtl.sourceIp " +
           "HAVING COUNT(gtl) >= :minThreats ORDER BY COUNT(gtl) DESC")
    List<Object[]> findRepeatOffenders(@Param("minThreats") int minThreats);

    /**
     * Get threat velocity (threats per hour) for last period
     */
    @Query("SELECT COUNT(gtl) as threatCount, " +
           "COUNT(gtl) / (TIMESTAMPDIFF(HOUR, MIN(gtl.timestamp), MAX(gtl.timestamp)) + 1) as threatsPerHour " +
           "FROM GeoThreatLog gtl WHERE gtl.timestamp >= :since")
    Object[] getThreatVelocity(@Param("since") LocalDateTime since);
}