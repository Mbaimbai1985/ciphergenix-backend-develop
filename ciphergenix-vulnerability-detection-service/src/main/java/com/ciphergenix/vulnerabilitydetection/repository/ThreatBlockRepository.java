package com.ciphergenix.vulnerabilitydetection.repository;

import com.ciphergenix.vulnerabilitydetection.model.ThreatBlock;
import com.ciphergenix.vulnerabilitydetection.model.ThreatLocation;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Repository interface for ThreatBlock entity
 * 
 * Provides data access methods for managing threat blocking operations
 * including IP blacklisting, whitelisting, and block management.
 */
@Repository
public interface ThreatBlockRepository extends JpaRepository<ThreatBlock, Long> {

    /**
     * Find active block for a specific IP address
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.blockedIp = :ipAddress " +
           "AND tb.isActive = true AND tb.blockStatus = 'ACTIVE' " +
           "AND (tb.isPermanent = true OR tb.expiresAt > :now)")
    Optional<ThreatBlock> findActiveBlockByIp(@Param("ipAddress") String ipAddress, 
                                             @Param("now") LocalDateTime now);

    /**
     * Find active block for a specific IP address (current time)
     */
    default Optional<ThreatBlock> findActiveBlockByIp(String ipAddress) {
        return findActiveBlockByIp(ipAddress, LocalDateTime.now());
    }

    /**
     * Find whitelisted entry for a specific IP address
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.blockedIp = :ipAddress " +
           "AND tb.isWhitelisted = true AND tb.isActive = true")
    Optional<ThreatBlock> findWhitelistedByIp(@Param("ipAddress") String ipAddress);

    /**
     * Find all active blocks
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.isActive = true " +
           "AND tb.blockStatus = 'ACTIVE' " +
           "AND (tb.isPermanent = true OR tb.expiresAt > :now)")
    List<ThreatBlock> findAllActiveBlocks(@Param("now") LocalDateTime now);

    /**
     * Find expired blocks that need cleanup
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.isActive = true " +
           "AND tb.isPermanent = false AND tb.expiresAt <= :now " +
           "AND tb.blockStatus = 'ACTIVE'")
    List<ThreatBlock> findExpiredBlocks(@Param("now") LocalDateTime now);

    /**
     * Find blocks by country
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.country = :country " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByCountry(@Param("country") String country);

    /**
     * Find blocks by severity level
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.severityLevel = :severity " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findBySeverityLevel(@Param("severity") ThreatLocation.SeverityLevel severity);

    /**
     * Find blocks by block reason
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.blockReason = :reason " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByBlockReason(@Param("reason") ThreatBlock.BlockReason reason);

    /**
     * Find recent blocks (last 24 hours)
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.createdAt >= :since " +
           "ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findRecentBlocks(@Param("since") LocalDateTime since);

    /**
     * Find blocks requiring manual review
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.manualReviewRequired = true " +
           "AND tb.isActive = true ORDER BY tb.createdAt ASC")
    List<ThreatBlock> findBlocksRequiringReview();

    /**
     * Find auto-blocked IPs
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.autoBlocked = true " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findAutoBlockedIps();

    /**
     * Find permanent blocks
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.isPermanent = true " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findPermanentBlocks();

    /**
     * Find blocks by threat score range
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.threatScore >= :minScore " +
           "AND tb.threatScore <= :maxScore AND tb.isActive = true " +
           "ORDER BY tb.threatScore DESC")
    List<ThreatBlock> findByThreatScoreRange(@Param("minScore") Double minScore, 
                                           @Param("maxScore") Double maxScore);

    /**
     * Find high-risk blocks (critical and high severity)
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.severityLevel IN ('CRITICAL', 'HIGH') " +
           "AND tb.isActive = true ORDER BY tb.threatScore DESC")
    List<ThreatBlock> findHighRiskBlocks();

    /**
     * Find blocks by IP range pattern
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.blockedIp LIKE :ipPattern " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByIpPattern(@Param("ipPattern") String ipPattern);

    /**
     * Find blocks by geographic location
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE " +
           "(:country IS NULL OR tb.country = :country) AND " +
           "(:region IS NULL OR tb.region = :region) AND " +
           "(:city IS NULL OR tb.city = :city) AND " +
           "tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByLocation(@Param("country") String country, 
                                   @Param("region") String region, 
                                   @Param("city") String city);

    /**
     * Count active blocks
     */
    @Query("SELECT COUNT(tb) FROM ThreatBlock tb WHERE tb.isActive = true " +
           "AND tb.blockStatus = 'ACTIVE' " +
           "AND (tb.isPermanent = true OR tb.expiresAt > :now)")
    Long countActiveBlocks(@Param("now") LocalDateTime now);

    /**
     * Count blocks by country
     */
    @Query("SELECT tb.country, COUNT(tb) FROM ThreatBlock tb " +
           "WHERE tb.isActive = true GROUP BY tb.country ORDER BY COUNT(tb) DESC")
    List<Object[]> countBlocksByCountry();

    /**
     * Count blocks by severity
     */
    @Query("SELECT tb.severityLevel, COUNT(tb) FROM ThreatBlock tb " +
           "WHERE tb.isActive = true GROUP BY tb.severityLevel")
    List<Object[]> countBlocksBySeverity();

    /**
     * Find top threat countries
     */
    @Query("SELECT tb.country, COUNT(tb) as blockCount, AVG(tb.threatScore) as avgScore " +
           "FROM ThreatBlock tb WHERE tb.isActive = true AND tb.country IS NOT NULL " +
           "GROUP BY tb.country ORDER BY COUNT(tb) DESC")
    List<Object[]> findTopThreatCountries();

    /**
     * Find blocks with VPN/Proxy/Tor characteristics
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE " +
           "(tb.isVpn = true OR tb.isProxy = true OR tb.isTor = true) " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findAnonymousSourceBlocks();

    /**
     * Find malware/botnet blocks
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE " +
           "(tb.isMalware = true OR tb.isBotnet = true) " +
           "AND tb.isActive = true ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findMaliciousSourceBlocks();

    /**
     * Find blocks that require escalation
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE " +
           "(tb.severityLevel = 'CRITICAL' OR tb.threatScore >= 9.0 OR " +
           "tb.threatCount > 100 OR (tb.isMalware = true AND tb.alertSent = false) OR " +
           "(tb.isBotnet = true AND tb.escalationLevel = 0)) " +
           "AND tb.isActive = true ORDER BY tb.threatScore DESC")
    List<ThreatBlock> findBlocksRequiringEscalation();

    /**
     * Find blocks by time range
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.createdAt >= :startTime " +
           "AND tb.createdAt <= :endTime ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByTimeRange(@Param("startTime") LocalDateTime startTime, 
                                    @Param("endTime") LocalDateTime endTime);

    /**
     * Find blocks by blocked user
     */
    @Query("SELECT tb FROM ThreatBlock tb WHERE tb.blockedByUser = :user " +
           "ORDER BY tb.createdAt DESC")
    List<ThreatBlock> findByBlockedByUser(@Param("user") String user);

    /**
     * Update block status in batch
     */
    @Query("UPDATE ThreatBlock tb SET tb.blockStatus = :status " +
           "WHERE tb.blockId IN :blockIds")
    void updateBlockStatus(@Param("blockIds") List<Long> blockIds, 
                          @Param("status") ThreatBlock.BlockStatus status);

    /**
     * Get threat statistics for dashboard
     */
    @Query("SELECT " +
           "COUNT(tb) as totalBlocks, " +
           "SUM(CASE WHEN tb.severityLevel = 'CRITICAL' THEN 1 ELSE 0 END) as criticalBlocks, " +
           "SUM(CASE WHEN tb.severityLevel = 'HIGH' THEN 1 ELSE 0 END) as highBlocks, " +
           "SUM(CASE WHEN tb.autoBlocked = true THEN 1 ELSE 0 END) as autoBlocks, " +
           "SUM(CASE WHEN tb.isPermanent = true THEN 1 ELSE 0 END) as permanentBlocks, " +
           "AVG(tb.threatScore) as avgThreatScore " +
           "FROM ThreatBlock tb WHERE tb.isActive = true")
    Object[] getThreatStatistics();

    /**
     * Get recent blocking activity (last 7 days)
     */
    @Query("SELECT DATE(tb.createdAt) as blockDate, COUNT(tb) as blockCount " +
           "FROM ThreatBlock tb WHERE tb.createdAt >= :since " +
           "GROUP BY DATE(tb.createdAt) ORDER BY DATE(tb.createdAt)")
    List<Object[]> getRecentBlockingActivity(@Param("since") LocalDateTime since);

    /**
     * Find duplicate IP blocks (same IP blocked multiple times)
     */
    @Query("SELECT tb.blockedIp, COUNT(tb) as blockCount " +
           "FROM ThreatBlock tb WHERE tb.isActive = true " +
           "GROUP BY tb.blockedIp HAVING COUNT(tb) > 1 " +
           "ORDER BY COUNT(tb) DESC")
    List<Object[]> findDuplicateIpBlocks();

    /**
     * Get geographic distribution of blocks
     */
    @Query("SELECT tb.country, tb.region, tb.city, COUNT(tb) as blockCount, " +
           "AVG(tb.threatScore) as avgThreatScore " +
           "FROM ThreatBlock tb WHERE tb.isActive = true " +
           "AND tb.country IS NOT NULL " +
           "GROUP BY tb.country, tb.region, tb.city " +
           "ORDER BY COUNT(tb) DESC")
    List<Object[]> getGeographicDistribution();
}