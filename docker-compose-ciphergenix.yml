version: '3.8'

services:
  # Discovery Service (already exists)
  discovery-service:
    build: ./discoveryservice
    ports:
      - "8761:8761"
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  # Gateway Service (already exists)
  gateway:
    build: ./gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery-service
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka

  # PostgreSQL Database for CipherGenix
  ciphergenix-postgres:
    image: postgres:15-alpine
    container_name: ciphergenix-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ciphergenix_master_db
      POSTGRES_USER: ciphergenix_user
      POSTGRES_PASSWORD: ciphergenix_pass
    volumes:
      - ciphergenix_postgres_data:/var/lib/postgresql/data
      - ./init-ciphergenix-dbs.sql:/docker-entrypoint-initdb.d/init-dbs.sql
    networks:
      - ciphergenix-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: ciphergenix-redis
    ports:
      - "6379:6379"
    volumes:
      - ciphergenix_redis_data:/data
    networks:
      - ciphergenix-network

  # Kafka (using existing compose-kafka.yml services)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ciphergenix-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ciphergenix-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ciphergenix-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ciphergenix-network

  # CipherGenix Vulnerability Detection Service
  vulnerability-detection-service:
    build: ./ciphergenix-vulnerability-detection-service
    ports:
      - "8081:8081"
    depends_on:
      - discovery-service
      - ciphergenix-postgres
      - kafka
      - redis
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka
      - DB_USERNAME=ciphergenix_user
      - DB_PASSWORD=ciphergenix_pass
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ciphergenix-postgres:5432/ciphergenix_vulnerability_db
    volumes:
      - ./logs/vulnerability-detection:/app/logs

  # CipherGenix Model Integrity Service
  model-integrity-service:
    build: ./ciphergenix-model-integrity-service
    ports:
      - "8082:8082"
    depends_on:
      - discovery-service
      - ciphergenix-postgres
      - kafka
      - redis
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka
      - DB_USERNAME=ciphergenix_user
      - DB_PASSWORD=ciphergenix_pass
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ciphergenix-postgres:5432/ciphergenix_model_integrity_db
    volumes:
      - ./logs/model-integrity:/app/logs

  # CipherGenix Security Engine Service
  security-engine-service:
    build: ./ciphergenix-security-engine-service
    ports:
      - "8083:8083"
    depends_on:
      - discovery-service
      - ciphergenix-postgres
      - kafka
      - redis
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka
      - DB_USERNAME=ciphergenix_user
      - DB_PASSWORD=ciphergenix_pass
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ciphergenix-postgres:5432/ciphergenix_security_engine_db
    volumes:
      - ./logs/security-engine:/app/logs

  # CipherGenix ML Model Service
  ml-model-service:
    build: ./ciphergenix-ml-model-service
    ports:
      - "8084:8084"
    depends_on:
      - discovery-service
      - ciphergenix-postgres
      - kafka
      - redis
    networks:
      - ciphergenix-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_SERVER_URL=http://discovery-service:8761/eureka
      - DB_USERNAME=ciphergenix_user
      - DB_PASSWORD=ciphergenix_pass
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ciphergenix-postgres:5432/ciphergenix_ml_model_db
    volumes:
      - ./logs/ml-model:/app/logs
      - ./ml-models:/app/models

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ciphergenix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ciphergenix_prometheus_data:/prometheus
    networks:
      - ciphergenix-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ciphergenix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ciphergenix_admin
    volumes:
      - ciphergenix_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ciphergenix-network

  # Log Aggregation - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ciphergenix-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - ciphergenix_elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ciphergenix-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ciphergenix-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ciphergenix-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ciphergenix-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - ciphergenix-network

networks:
  ciphergenix-network:
    driver: bridge

volumes:
  ciphergenix_postgres_data:
  ciphergenix_redis_data:
  ciphergenix_prometheus_data:
  ciphergenix_grafana_data:
  ciphergenix_elasticsearch_data: