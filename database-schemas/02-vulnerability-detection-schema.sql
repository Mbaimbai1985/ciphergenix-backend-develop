-- =====================================================================
-- CipherGenix Vulnerability Detection Service - Database Schema
-- =====================================================================
-- This script creates all tables for the Vulnerability Detection service
-- Version: 1.0
-- =====================================================================

\c ciphergenix_vulnerability_db;

-- =====================================================================
-- DETECTION RESULTS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS detection_results (
    id BIGSERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    detection_type VARCHAR(50) NOT NULL CHECK (detection_type IN ('DATA_POISONING', 'ADVERSARIAL_ATTACK', 'MODEL_THEFT')),
    threat_score DOUBLE PRECISION NOT NULL CHECK (threat_score >= 0.0 AND threat_score <= 1.0),
    is_threat_detected BOOLEAN NOT NULL DEFAULT FALSE,
    confidence_score DOUBLE PRECISION NOT NULL CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0),
    algorithm_used VARCHAR(100) NOT NULL,
    processing_time_ms BIGINT NOT NULL,
    model_version VARCHAR(50) DEFAULT '1.0',
    detection_details JSONB,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================================
-- ALGORITHM CONFIGURATIONS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS algorithm_configurations (
    id BIGSERIAL PRIMARY KEY,
    algorithm_name VARCHAR(100) NOT NULL UNIQUE,
    algorithm_type VARCHAR(50) NOT NULL CHECK (algorithm_type IN ('ISOLATION_FOREST', 'ONE_CLASS_SVM', 'LOF', 'DBSCAN', 'STATISTICAL_OUTLIER', 'AUTOENCODER', 'VAE', 'GAN_DISCRIMINATOR')),
    configuration_json JSONB NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    performance_metrics JSONB,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================================
-- MONITORING SESSIONS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS monitoring_sessions (
    id BIGSERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL UNIQUE,
    session_name VARCHAR(200),
    monitoring_type VARCHAR(50) NOT NULL CHECK (monitoring_type IN ('REAL_TIME', 'BATCH', 'SCHEDULED')),
    status VARCHAR(30) NOT NULL DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE', 'PAUSED', 'STOPPED', 'COMPLETED', 'FAILED')),
    target_models TEXT[], -- Array of model IDs
    detection_config JSONB NOT NULL,
    alert_threshold DOUBLE PRECISION DEFAULT 0.7 CHECK (alert_threshold >= 0.0 AND alert_threshold <= 1.0),
    created_by VARCHAR(100),
    started_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    stopped_at TIMESTAMP(6) WITH TIME ZONE,
    last_activity TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    total_detections INTEGER DEFAULT 0,
    threats_detected INTEGER DEFAULT 0
);

-- =====================================================================
-- DATA POISONING DETECTIONS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS data_poisoning_detections (
    id BIGSERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    dataset_id VARCHAR(255) NOT NULL,
    model_type VARCHAR(50) NOT NULL CHECK (model_type IN ('CLASSIFICATION', 'REGRESSION', 'CLUSTERING', 'ANOMALY_DETECTION')),
    poisoned_samples INTEGER DEFAULT 0,
    total_samples INTEGER NOT NULL,
    poisoning_rate DOUBLE PRECISION GENERATED ALWAYS AS (
        CASE 
            WHEN total_samples > 0 THEN CAST(poisoned_samples AS DOUBLE PRECISION) / total_samples
            ELSE 0.0
        END
    ) STORED,
    detection_algorithms TEXT[] NOT NULL,
    anomaly_scores JSONB,
    feature_importance JSONB,
    cluster_analysis JSONB,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES detection_results(session_id) ON DELETE CASCADE
);

-- =====================================================================
-- ADVERSARIAL ATTACK DETECTIONS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS adversarial_attack_detections (
    id BIGSERIAL PRIMARY KEY,
    session_id VARCHAR(255) NOT NULL,
    model_id VARCHAR(255) NOT NULL,
    attack_types TEXT[] NOT NULL,
    detection_methods TEXT[] NOT NULL,
    input_dimension INTEGER,
    perturbation_magnitude DOUBLE PRECISION,
    adversarial_confidence DOUBLE PRECISION CHECK (adversarial_confidence >= 0.0 AND adversarial_confidence <= 1.0),
    original_prediction JSONB,
    adversarial_prediction JSONB,
    statistical_analysis JSONB,
    feature_analysis JSONB,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (session_id) REFERENCES detection_results(session_id) ON DELETE CASCADE
);

-- =====================================================================
-- THREAT ANALYTICS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS threat_analytics (
    id BIGSERIAL PRIMARY KEY,
    date_period DATE NOT NULL,
    period_type VARCHAR(20) NOT NULL CHECK (period_type IN ('DAILY', 'WEEKLY', 'MONTHLY')),
    total_detections INTEGER DEFAULT 0,
    data_poisoning_count INTEGER DEFAULT 0,
    adversarial_attack_count INTEGER DEFAULT 0,
    model_theft_count INTEGER DEFAULT 0,
    average_threat_score DOUBLE PRECISION,
    high_severity_threats INTEGER DEFAULT 0,
    medium_severity_threats INTEGER DEFAULT 0,
    low_severity_threats INTEGER DEFAULT 0,
    processing_time_avg_ms BIGINT,
    unique_sessions INTEGER DEFAULT 0,
    false_positive_rate DOUBLE PRECISION,
    detection_accuracy DOUBLE PRECISION,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(date_period, period_type)
);

-- =====================================================================
-- ALERT CONFIGURATIONS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS alert_configurations (
    id BIGSERIAL PRIMARY KEY,
    alert_name VARCHAR(200) NOT NULL,
    detection_type VARCHAR(50) NOT NULL,
    severity VARCHAR(20) NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    threshold_config JSONB NOT NULL,
    notification_channels TEXT[] DEFAULT ARRAY['EMAIL'], -- EMAIL, SMS, WEBHOOK, SLACK
    is_active BOOLEAN DEFAULT TRUE,
    cooldown_minutes INTEGER DEFAULT 15,
    escalation_config JSONB,
    created_by VARCHAR(100),
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================================
-- ALERT HISTORY TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS alert_history (
    id BIGSERIAL PRIMARY KEY,
    alert_config_id BIGINT NOT NULL,
    session_id VARCHAR(255) NOT NULL,
    detection_result_id BIGINT NOT NULL,
    alert_level VARCHAR(20) NOT NULL,
    alert_message TEXT NOT NULL,
    notification_sent BOOLEAN DEFAULT FALSE,
    notification_channels TEXT[],
    acknowledged BOOLEAN DEFAULT FALSE,
    acknowledged_by VARCHAR(100),
    acknowledged_at TIMESTAMP(6) WITH TIME ZONE,
    resolved BOOLEAN DEFAULT FALSE,
    resolved_by VARCHAR(100),
    resolved_at TIMESTAMP(6) WITH TIME ZONE,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (alert_config_id) REFERENCES alert_configurations(id) ON DELETE CASCADE,
    FOREIGN KEY (detection_result_id) REFERENCES detection_results(id) ON DELETE CASCADE
);

-- =====================================================================
-- MODEL SECURITY STATUS TABLE
-- =====================================================================
CREATE TABLE IF NOT EXISTS model_security_status (
    id BIGSERIAL PRIMARY KEY,
    model_id VARCHAR(255) NOT NULL UNIQUE,
    model_name VARCHAR(200),
    security_score DOUBLE PRECISION CHECK (security_score >= 0.0 AND security_score <= 1.0),
    vulnerability_count INTEGER DEFAULT 0,
    last_scan_at TIMESTAMP(6) WITH TIME ZONE,
    scan_frequency_hours INTEGER DEFAULT 24,
    status VARCHAR(30) DEFAULT 'HEALTHY' CHECK (status IN ('HEALTHY', 'AT_RISK', 'COMPROMISED', 'UNKNOWN')),
    risk_factors JSONB,
    recommendations JSONB,
    compliance_score DOUBLE PRECISION,
    created_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP(6) WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =====================================================================

-- Detection Results Indexes
CREATE INDEX IF NOT EXISTS idx_detection_results_session_id ON detection_results(session_id);
CREATE INDEX IF NOT EXISTS idx_detection_results_detection_type ON detection_results(detection_type);
CREATE INDEX IF NOT EXISTS idx_detection_results_created_at ON detection_results(created_at);
CREATE INDEX IF NOT EXISTS idx_detection_results_threat_detected ON detection_results(is_threat_detected);
CREATE INDEX IF NOT EXISTS idx_detection_results_threat_score ON detection_results(threat_score);
CREATE INDEX IF NOT EXISTS idx_detection_results_confidence ON detection_results(confidence_score);

-- Monitoring Sessions Indexes
CREATE INDEX IF NOT EXISTS idx_monitoring_sessions_session_id ON monitoring_sessions(session_id);
CREATE INDEX IF NOT EXISTS idx_monitoring_sessions_status ON monitoring_sessions(status);
CREATE INDEX IF NOT EXISTS idx_monitoring_sessions_started_at ON monitoring_sessions(started_at);
CREATE INDEX IF NOT EXISTS idx_monitoring_sessions_last_activity ON monitoring_sessions(last_activity);

-- Algorithm Configurations Indexes
CREATE INDEX IF NOT EXISTS idx_algorithm_configs_active ON algorithm_configurations(is_active);
CREATE INDEX IF NOT EXISTS idx_algorithm_configs_type ON algorithm_configurations(algorithm_type);

-- Data Poisoning Detections Indexes
CREATE INDEX IF NOT EXISTS idx_data_poisoning_session_id ON data_poisoning_detections(session_id);
CREATE INDEX IF NOT EXISTS idx_data_poisoning_dataset_id ON data_poisoning_detections(dataset_id);
CREATE INDEX IF NOT EXISTS idx_data_poisoning_rate ON data_poisoning_detections(poisoning_rate);

-- Adversarial Attack Detections Indexes
CREATE INDEX IF NOT EXISTS idx_adversarial_session_id ON adversarial_attack_detections(session_id);
CREATE INDEX IF NOT EXISTS idx_adversarial_model_id ON adversarial_attack_detections(model_id);
CREATE INDEX IF NOT EXISTS idx_adversarial_confidence ON adversarial_attack_detections(adversarial_confidence);

-- Threat Analytics Indexes
CREATE INDEX IF NOT EXISTS idx_threat_analytics_date_period ON threat_analytics(date_period);
CREATE INDEX IF NOT EXISTS idx_threat_analytics_period_type ON threat_analytics(period_type);
CREATE INDEX IF NOT EXISTS idx_threat_analytics_created_at ON threat_analytics(created_at);

-- Alert History Indexes
CREATE INDEX IF NOT EXISTS idx_alert_history_session_id ON alert_history(session_id);
CREATE INDEX IF NOT EXISTS idx_alert_history_alert_level ON alert_history(alert_level);
CREATE INDEX IF NOT EXISTS idx_alert_history_acknowledged ON alert_history(acknowledged);
CREATE INDEX IF NOT EXISTS idx_alert_history_resolved ON alert_history(resolved);
CREATE INDEX IF NOT EXISTS idx_alert_history_created_at ON alert_history(created_at);

-- Model Security Status Indexes
CREATE INDEX IF NOT EXISTS idx_model_security_model_id ON model_security_status(model_id);
CREATE INDEX IF NOT EXISTS idx_model_security_status ON model_security_status(status);
CREATE INDEX IF NOT EXISTS idx_model_security_score ON model_security_status(security_score);
CREATE INDEX IF NOT EXISTS idx_model_security_last_scan ON model_security_status(last_scan_at);

-- =====================================================================
-- INITIAL DATA INSERTION
-- =====================================================================

-- Insert default algorithm configurations
INSERT INTO algorithm_configurations (algorithm_name, algorithm_type, configuration_json, performance_metrics) VALUES
('IsolationForest-Default', 'ISOLATION_FOREST', 
 '{"contamination": 0.1, "n_estimators": 100, "max_samples": "auto", "random_state": 42}',
 '{"accuracy": 0.92, "precision": 0.89, "recall": 0.85, "f1_score": 0.87}'),
 
('OneClassSVM-Default', 'ONE_CLASS_SVM', 
 '{"gamma": "scale", "nu": 0.1, "kernel": "rbf"}',
 '{"accuracy": 0.88, "precision": 0.91, "recall": 0.82, "f1_score": 0.86}'),
 
('LocalOutlierFactor-Default', 'LOF', 
 '{"n_neighbors": 20, "contamination": 0.1, "algorithm": "auto"}',
 '{"accuracy": 0.90, "precision": 0.87, "recall": 0.88, "f1_score": 0.87}'),
 
('DBSCAN-Default', 'DBSCAN', 
 '{"eps": 0.5, "min_samples": 5, "algorithm": "auto"}',
 '{"accuracy": 0.86, "precision": 0.84, "recall": 0.83, "f1_score": 0.83}'),
 
('Autoencoder-Default', 'AUTOENCODER', 
 '{"hidden_layers": [64, 32, 16, 32, 64], "activation": "relu", "learning_rate": 0.001, "epochs": 100}',
 '{"accuracy": 0.94, "precision": 0.93, "recall": 0.90, "f1_score": 0.91}');

-- Insert default alert configurations
INSERT INTO alert_configurations (alert_name, detection_type, severity, threshold_config, notification_channels, created_by) VALUES
('High Threat Detection', 'DATA_POISONING', 'HIGH', 
 '{"threat_score_threshold": 0.8, "confidence_threshold": 0.7}', 
 ARRAY['EMAIL', 'WEBHOOK'], 'system'),
 
('Critical Adversarial Attack', 'ADVERSARIAL_ATTACK', 'CRITICAL', 
 '{"threat_score_threshold": 0.9, "confidence_threshold": 0.8, "perturbation_threshold": 0.1}', 
 ARRAY['EMAIL', 'SMS', 'WEBHOOK'], 'system'),
 
('Model Theft Alert', 'MODEL_THEFT', 'HIGH', 
 '{"threat_score_threshold": 0.75, "query_frequency_threshold": 100}', 
 ARRAY['EMAIL', 'WEBHOOK'], 'system');

-- =====================================================================
-- FUNCTIONS AND PROCEDURES
-- =====================================================================

-- Function to calculate threat severity based on score
CREATE OR REPLACE FUNCTION calculate_threat_severity(threat_score DOUBLE PRECISION)
RETURNS VARCHAR(20) AS $$
BEGIN
    CASE 
        WHEN threat_score >= 0.9 THEN RETURN 'CRITICAL';
        WHEN threat_score >= 0.7 THEN RETURN 'HIGH';
        WHEN threat_score >= 0.4 THEN RETURN 'MEDIUM';
        ELSE RETURN 'LOW';
    END CASE;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- Function to update threat analytics
CREATE OR REPLACE FUNCTION update_threat_analytics(detection_date DATE, detection_type VARCHAR(50))
RETURNS VOID AS $$
BEGIN
    INSERT INTO threat_analytics (date_period, period_type, total_detections,
        data_poisoning_count, adversarial_attack_count, model_theft_count)
    VALUES (detection_date, 'DAILY', 1,
        CASE WHEN detection_type = 'DATA_POISONING' THEN 1 ELSE 0 END,
        CASE WHEN detection_type = 'ADVERSARIAL_ATTACK' THEN 1 ELSE 0 END,
        CASE WHEN detection_type = 'MODEL_THEFT' THEN 1 ELSE 0 END)
    ON CONFLICT (date_period, period_type)
    DO UPDATE SET
        total_detections = threat_analytics.total_detections + 1,
        data_poisoning_count = threat_analytics.data_poisoning_count + 
            CASE WHEN detection_type = 'DATA_POISONING' THEN 1 ELSE 0 END,
        adversarial_attack_count = threat_analytics.adversarial_attack_count + 
            CASE WHEN detection_type = 'ADVERSARIAL_ATTACK' THEN 1 ELSE 0 END,
        model_theft_count = threat_analytics.model_theft_count + 
            CASE WHEN detection_type = 'MODEL_THEFT' THEN 1 ELSE 0 END;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update analytics when detection results are inserted
CREATE OR REPLACE FUNCTION trigger_update_analytics()
RETURNS TRIGGER AS $$
BEGIN
    PERFORM update_threat_analytics(NEW.created_at::DATE, NEW.detection_type);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER analytics_update_trigger
    AFTER INSERT ON detection_results
    FOR EACH ROW
    EXECUTE FUNCTION trigger_update_analytics();

-- Grant permissions
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ciphergenix_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ciphergenix_user;
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO ciphergenix_user;

SELECT 'Vulnerability Detection database schema created successfully!' as status;